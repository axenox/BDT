<?php
namespace axenox\BDT\Tests\Behat\Contexts\UI5Facade;

use Behat\Mink\Session;
use exface\Core\DataTypes\StringDataType;

/**
 * Allows to work with OpenUI5 apps generated by exface.UI5Facade
 * 
 * @author Andrej Kabachnik
 */
class UI5Browser
{
    private $session;

    // Constructor
    public function __construct(Session $session, string $ui5AppUrl)
    {
        $this->session = $session;
        $this->waitForAppLoaded($ui5AppUrl);
    }

    public function findInputByLabel(string $label)
    {
        $page = $this->getPage();
        $input = null;
        // $input = $page->find('xpath', '//*/label/span/bdi[contains(text(), "' . $label . '")]');
        // $labelBdi = $page->find('named', ['content', $label]);
        $labelBdis = $page->findAll('css', 'label.sapMLabel > span > bdi');
        foreach ($labelBdis as $labelBdi) {
            if ($labelBdi->getText() === $label) {
                $sapMLabel = $labelBdi->getParent()->getParent();
                $labelFor = $sapMLabel->getAttribute('for');
                $input = $sapMLabel->getParent()->getParent()->findById($labelFor);
                break;
            }
        }
        return $input;
    }

    public function findButtonByLabel(string $label)
    {
        $page = $this->getPage();
        $input = null;
        // $input = $page->find('xpath', '//*/label/span/bdi[contains(text(), "' . $label . '")]');
        // $labelBdi = $page->find('named', ['content', $label]);
        $labelBdis = $page->findAll('css', 'button.sapMBtn > span > span > bdi');
        foreach ($labelBdis as $labelBdi) {
            if ($labelBdi->getText() === $label) {
                $button = $labelBdi->getParent()->getParent()->getParent();
                break;
            }
        }
        return $button;
    }

    public function getPage()
    {
        return $this->session->getPage();
    }

    protected function waitForAppLoaded(string $pageUrl)
    {
        $appId = StringDataType::substringBefore($pageUrl, '.html', $pageUrl) . '.app';
        $this->waitForNodeId($appId);
    }

    protected function waitForNodeId(string $id, int $timeoutInSeconds = 10)
    {
        $page = $this->getPage();
        $page->waitFor($timeoutInSeconds*1000,
            function () use ($page, $id) {
                $app = $page->findById($id);
                return $app && $app->isVisible();
            }
        );
    }

    public function waitWhileAppBusy(int $timeoutInSeconds = 5) : bool
    {
        return $this->getSession()->wait($timeoutInSeconds*1000, <<<JS
            (function() {
                if (document.readyState !== "complete") {
                    return false;
                }
                if ((typeof $ !== 'undefined') && $.active !== 0) {
                    return false;
                }/*
                if ((typeof XMLHttpRequest !== 'undefined') && XMLHttpRequest.prototype.readyState !== 4) {
                    return false;
                }*/
                if ((typeof exfLauncher === 'undefined') || exfLauncher === undefined) {
                    return false;
                }
                return exfLauncher.isBusy() === false;
            })()
JS
        );
    }

    public function waitForAjaxFinished(int $timeoutInSeconds = 5) : bool
    {
        return $this->getSession()->wait($timeoutInSeconds*1000, <<<JS
            (function() {
                if (typeof $ !== 'undefined') {
                    return $.active === 0;
                }
                if (typeof XMLHttpRequest !== 'undefined') {
                    return XMLHttpRequest.prototype.readyState === 4;
                }
                return true;
            })()
JS
        );
    }

    public function waitForPageIsFullyLoaded($timeoutInSeconds = 5)
    {
        $this->getSession()->wait($timeoutInSeconds*1000, <<<JS
            document.readyState === "complete"
JS
        );
    }

    public function countWigets(string $widgetType, int $timeoutInSeconds = 2) : int
    {
        // Wait for at least one of the widget to show up. This is important to make sure, they really
        // have loaded. 
        $cssSelector = ".exfw-{$widgetType}";
        $timeout = $this->getSession()->wait($timeoutInSeconds*1000, <<<JS
            (function() {
                var jqEls = $('{$cssSelector}');
                return jqEls.length !== 0;
            })()
JS
        );

        // FIXME how to check, if the timeout was reached???

        // Now count, how many there are
        $page = $this->getPage();
        $widgets = $page->findAll('css', $cssSelector);
        $cnt = 0;
        foreach ($widgets as $w) {
            if ($w->isVisible()) {
                $cnt++;
            }
        }
        return $cnt;
    }

    protected function getSession() : Session
    {
        return $this->session;
    }
}